This document describes the procedure to go from an ETC log file
containing (py)synphot commands for a single instrument's set of
regression tests to a .py file containing defined testcases.

ORIGINALLY:

- Log files were received from Donald in Spring 08; thermback cases came in a
   separate file
- They were hand-parsed to replace the CDBS specification
- They were further processed by gencases.py to produce .py files

Command line procedure:
  python gencases.py acs_etc_cases.txt

produced:
  acs_etc_cases.py

OVER TIME:
- gencases.py was made smart enough to omit duplicate cases without
renaming anything by constructing a dictionary keyed by (task,obsmode,spectrum) - support for the "subset" flag was added

Command line procedure:
  python gencases.py acs_etc_cases.txt acs_etc_cases_subset.txt

produced:
  acs_etc_cases.py


CURRENTLY (committed with r705-709):

- New log files were received. These included the ETC IDs prior to the
  related set of (py)synphot commands for each id. Also, the syntax
  was different: field separators were different; some CALCSPEC cases
  were known to have been removed; all THERMBACK cases were mixed in 
  with the other commands.

- A new script, parselog.py, was written to handle the
  pre-processing. A new parsed log was written containing only the
  (py)synphot commands which had been modified to include the ETCID as
  another field.

- gencases.py was made much more complicated:
    - replace the CDBS specifications if necessary
    - pickle the (task,obsmode,spectrum) dictionary if it is being
    constructed; read it in if it already exists
    - warnings are printed if a case is encountered that doesn't exist
    in the dictionary

The idea then is to run the new gencases on the old log files first,
to generate these pickled dictionaries; then run them on the new
(parsed) log files, which SHOULD not produce any warnings. Note that a
warning will be produced if a case exists in the new file that was not
in the old file; but will not be produced if a case exists in the old
file but does not exist in the new file.

The resulting command line procedure is so intricate that separate
scripts were written for each of the instruments, along with cleanup
scripts and a wrapper for the whole thing. This set of scripts, 
together with the new log files, have been placed in the log2cases 
subdirectory of the commissioning directory.

The procedure to run these scripts is:
cd log2cases
copyfiles.csh 
#.....copies in the old logs and the subset files
process_all.csh > process_all.log 
#.....does the actual work; statistics reported to the log file
#Unrecognized cases in the new log files are reported in the
#individual instrument logfile.
rename_py.csh
#.....copies the newly created files to the old names. Scary!

cleanup_copyfiles: removes the copied-in files. Rarely needed.
cleanup_call.csh: removes all files **except** process_all.log

For ACS, some calcspec cases disappeared as expected, but all other
cases agreed.

For all other instruments, some non-calcspec cases disappeared, and
some additional cases appeared. See process_all.log for details.
